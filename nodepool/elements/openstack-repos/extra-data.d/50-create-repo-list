#!/usr/bin/env python

# Copyright (C) 2011-2013 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import urllib2
from urllib2 import URLError
import yaml

# BH: upstream project-config is more in sync with US devstack
URL = ('https://git.openstack.org/cgit/openstack-infra/project-config/'
       'plain/gerrit/projects.yaml')

TMP_HOOKS_PATH=os.environ['TMP_HOOKS_PATH']
PROJECTS_REPOS=os.path.join(TMP_HOOKS_PATH, 'source-repository-projects-yaml')
GIT_BASE=os.environ.get('GIT_BASE', 'git://git.openstack.org')

override_mappings = {
    "openstack-infra/devstack-gate" : "tesora/tesora-devstack-gate",
    "openstack-infra/nodepool" : "tesora/tesora-nodepool",
    "openstack-infra/zuul" : "tesora/tesora-zuul",
    "openstack-infra/project-config" : "tesora/tesora-project-config",
    "openstack-infra/system-config" : "tesora/tesora-config",
    "openstack-infra/config" : "tesora/tesora-config",
    "openstack/api-site" : "tesora/tesora-api-site",
    "openstack/horizon" : "tesora/tesora-horizon",
    "openstack/openstack-manuals" : "tesora/tesora-openstack-manuals",
    "openstack/python-troveclient" : "tesora/tesora-python-troveclient",
    "openstack/requirements" : "tesora/tesora-requirements",
    "openstack/trove" : "tesora/tesora-trove",
    "openstack/trove-integration" : "tesora/tesora-trove-integration",
    "openstack/trove-specs" : "tesora/tesora-trove-specs",
}

CUSTOM_PROJECTS_LIST_URL=os.environ.get('DIB_CUSTOM_PROJECTS_LIST_URL')

def get_project_list(url):
    try:
        projects = [f['project'] for f in yaml.load(urllib2.urlopen(url))]
        return projects
    except URLError:
        print "Could not open project list url: '%s'" % url
        return None

def main():
    projects = []
    if CUSTOM_PROJECTS_LIST_URL:
        projects = get_project_list(CUSTOM_PROJECTS_LIST_URL)

    if not projects:
        projects = get_project_list(URL)

    with open(PROJECTS_REPOS, 'w') as projects_list:
        for project in projects:
            # Skip repos that are inactive
            dirname = os.path.dirname(project)
            if not ('attic' in dirname or dirname == 'stackforge'):

                dest = override_mappings.get(project)
                if dest is None:
                    args = dict(
                        name=os.path.basename(project),
                        location=os.path.join('/opt/git', project),
                        url='%s/%s.git' % (GIT_BASE, project),
                        ref='*')
                    projects_list.write("%(name)s git %(location)s "
                                        "%(url)s %(ref)s\n" % args)

                else:
                    args = dict(
                        name=os.path.basename(project),
                        location=os.path.join('/opt/git', project),
                        url='%s/%s.git' % ("https://github.com", dest),
                        ref='*')
                    projects_list.write("%(name)s git %(location)s "
                                        "%(url)s %(ref)s\n" % args)

        # Clone openstack-infra/system-config again so that we can use it to
        # build the image without interferring with the slave repo cache.
        project = 'openstack-infra/system-config'
        args = dict(
            name='config_tmp',
            location=os.path.join('/opt/build_git', project),
            url="https://github.com/tesora/tesora-config",
            ref=os.environ.get('CONFIG_REF', '*'))
        projects_list.write(
                "%(name)s git %(location)s %(url)s %(ref)s\n" % args)


if __name__ == '__main__':
    main()
